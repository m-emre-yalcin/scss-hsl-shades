// Define colors as HSL see: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl()
$lightColors: (
  primary: (
    h: 250,
    s: 100%,
    l: 100%,
  ),
  secondary: (
    h: 240,
    s: 20%,
    l: 79%,
  ),
  blue: (
    h: 214,
    s: 90%,
    l: 64%,
  ),
);

$darkColors: (
  primary: (
    h: 240,
    s: 21%,
    l: 6%,
  ),
  secondary: (
    h: 240,
    s: 21%,
    l: 6%,
  ),
  blue: (
    h: 214,
    s: 90%,
    l: 64%,
  ),
);


// Create shades and use them in css variables
@mixin create-color-variables($hsl_colors) {
  @each $name, $hsl in $hsl_colors {
    $h: 0; // hue
    $s: 0; // saturation
    $l: 0; // lightness
    $a: 1; // alpha

    // get hue if exists
    @if map-has-key($hsl, h) {
      $h: map-get($hsl, h);
    }

    // get saturation if exists
    @if map-has-key($hsl, s) {
      $s: map-get($hsl, s);
    }

    // get lightness if exists
    @if map-has-key($hsl, l) {
      $l: map-get($hsl, l);
    }

    // get alpha if exists
    @if map-has-key($hsl, a) {
      $a: map-get($hsl, a);
    }

    #{'--' + $name + '-darker'}: hsla($h, $s, calc(#{$l} - 10%), $a);
    #{'--' + $name + '-dark'}: hsla($h, $s, calc(#{$l} - 5%), $a);
    #{'--' + $name}: hsla($h, $s, $l, $a);
    #{'--' + $name + '-light'}: hsla($h, $s, calc(#{$l} + 5%), $a);
    #{'--' + $name + '-lighter'}: hsla($h, $s, calc(#{$l} + 10%), $a);
  }
}

// Define themes:
:root,
:root[light] {
  @include create-color-variables($lightColors);
}
:root[dark] {
  @include create-color-variables($lightColors);
}
